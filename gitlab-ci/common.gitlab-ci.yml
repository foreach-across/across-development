# .gitlab-ci.yml extension enables completion support in IntelliJ

variables:
  MAVEN_REPO_DIR: $CI_PROJECT_DIR/.m2/repository

  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Xmx256m
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
  # of the `Slf4jMavenTransferListener` is no longer necessary.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    --update-snapshots
#    -DinstallAtEnd=true
#    -DdeployAtEnd=true

  # Specify the timezone - used by date tests
  TZ: "Europe/Brussels"
  # Specify a language - used by LocaleContextHolder
  LANG: "en_US.UTF-8"

  ORACLE_INIT_SQL: |
    CREATE USER axt IDENTIFIED BY across_test;
    GRANT CONNECT, RESOURCE TO axt;
    GRANT CREATE SESSION, GRANT ANY PRIVILEGE TO axt;
    GRANT UNLIMITED TABLESPACE TO axt;
    GRANT SELECT ON SYS.DBA_RECYCLEBIN TO AXT;


# I think this example workflow is exactly what we need:
# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
# This runs:
# - Branch pipelines when a merge request is not open for the branch.
# - Merge request pipelines when a merge request is open for the branch.
# There is one customization here:
# - Also run a (limited) pipeline when a tag starting with 'v' is pushed:
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG =~ /^v.*/


# Keep version and apt-get commands in sync between .gitlab-ci.yml, Dockerfiles and .java files
# (for testcontainers, see for instance ImageServerTestContainer.java in across-media-modules):
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.9-eclipse-temurin-${JAVA_VERSION}

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
cache:
  paths:
    - $MAVEN_REPO_DIR

default:
  before_script:
    - if [[ -f ci-before.sh ]]; then ./ci-before.sh; fi

  after_script:
    - rm -rf $MAVEN_REPO_DIR/com/foreach || echo "Nothing to delete" # Don't cache this
  # It appears 4GB is not enough for some of the tests with Oracle (but that's not really the case ...):
  # - I've seen the oracle job duration vary widely from 5 to 20 min. I've seen it 'hang' (no output) for a long time: this might be swapping.
  # - I've seen at least two cases where maven was killed, probably by the OOM killer (but nothing to really confirm that):
  #   https://gitlab.isaac.nl/antwerpen/across/across-media-modules/-/jobs/475011
  #   https://gitlab.isaac.nl/antwerpen/across/across-media-modules/-/jobs/475134
  # From a dmesg from a later job (https://gitlab.isaac.nl/antwerpen/across/across-media-modules/-/jobs/475188),
  # I could see there was at least once a java process killed by the OOM killer:
  #   [19004.343810] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0,global_oom,task_memcg=/docker/c480de908f743e035dec8a9b846eba3f435b4d713bef9aba16b3c50cb4789d7c,task=java,pid=54980,uid=0
  #   [19004.343853] Out of memory: Killed process 54980 (java) total-vm:3435944kB, anon-rss:674984kB, file-rss:0kB, shmem-rss:0kB, UID:0 pgtables:1644kB oom_score_adj:0
  #   [19004.383415] oom_reaper: reaped process 54980 (java), now anon-rss:0kB, file-rss:0kB, shmem-rss:0kB
  # With almost 3.5 GiB that makes sense.
  # From the info higher in that job log (from dmesg) we can also see that Oracle was running,
  # and that there were two java processes:
  #   [19004.343584] [  pid  ]   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name
  #   [19004.343749] [  54980]     0 54980   858986   168746  1683456        0             0 java
  #   [19004.343783] [  56559]     0 56559   869420   148972  1544192        0             0 java
  # (total_vm unit is pages => 858986 * 4kB = 3435944kB)
  # This would also mean that maven is the one with the most memory, not Oracle, nor the JVM started by surefire/failsafe to run the tests ...
  # But then again, the output of `free` confirms that there is no swap (as it should be) ...
  # To work around this, we had to set-Xmx for both maven itself (-Xmx256m) and for the JVM forked by the maven-failsafe-plugin (-Xmx512m)
  # To help debug these kind of issues, uncomment this (for instance dmesg will give more info about the OOM kill):
  #- 'free -m || echo "free command failed (most likely not present)"'
  #- 'dmesg || echo "dmesg command failed (most likely not present)"'

#whatsmyip:
#  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/curlimages/curl:latest
#  stage: .pre
#  script:
#    - env | grep -i proxy || echo "Nothing found"
#    - curl --silent 'https://api.ipify.org?format=json'

#curl:google:
#  script:
#    - curl --connect-timeout 10 https://www.google.com
#    - echo "Success Google"

#curl:nexus-foreach:
#  script:
#    - curl --connect-timeout 10 https://repository.antwerpen.io-external.com/nexus/repository/public/archetype-catalog.xml
#    - echo "Success Nexus Foreach"
