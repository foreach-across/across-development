#!/usr/bin/env python3
from typing import Sequence, Dict, List

from prettytable import PrettyTable, MARKDOWN

GroupDict = Dict[str, List[str]]


def main():
    raw_groups = parse()
    group_tables = {
        group_name: to_table(modules) for group_name, modules in raw_groups.items()
    }
    print(
        """---
title: Modules
---

<!-- Generated by generate-modules-markdown.py. DO NOT EDIT! -->

[Across Framework and Platform documentation](https://across.dev/documentation)

"""
    )
    for group, table in group_tables.items():
        table.set_style(MARKDOWN)
        print(f"## {group}")
        print()
        print(f"[GitHub](https://github.com/foreachos/{group})")
        print()
        print(
            f"[GitLab (internal only!)](https://gitlab.isaac.nl/antwerpen/across/{group})"
        )
        print()
        print(table)
        print()
        print()


def parse() -> GroupDict:
    result: GroupDict = dict()
    with open("data-modules.txt") as ins:
        for line in ins.readlines():
            line = line.strip()
            if line and not line.startswith("##"):
                (group, module) = line.split("/")
                if group in result:
                    modules = result[group]
                else:
                    modules = list()
                    result[group] = modules
                modules.append(module)
    return result


def to_table(modules: Sequence[str]) -> PrettyTable:
    t = PrettyTable()
    t.field_names = [
        "Doc",
        "Javadoc",
        "Maven Central",
        "Maven Central (raw)",
        "Bitbucket (legacy)",
        "Jira (unused)",
    ]
    for module in modules:
        # if module in {"imageserver-client", "imageserver-client"}:
        #     doc_module="image-server"
        # elif module == "imageserver-admin":
        #     doc_module= "image-server-admin-ui"
        if module == "across-hibernate-module":
            doc_module = "hibernate-jpa-module"
        else:
            doc_module = module
        t.add_row(
            [
                link(
                    module,
                    f"https://foreach-across.github.io/ref-docs-5/{doc_module}/",
                ),
                link("TODO", f"https://example.com"),
                link(
                    "Maven Central",
                    f"https://central.sonatype.com/artifact/com.foreach.across.modules/{module}/",
                ),
                link(
                    "Raw",
                    f"https://repo1.maven.org/maven2/com/foreach/across/modules/{module}/",
                ),
                link("Bitbucket", f"https://bitbucket.org/beforeach/{module}/"),
                link("TODO", f"https://example.com"),
            ]
        )
    return t


def link(title, url):
    return f"[{title}]({url})"


if __name__ == "__main__":
    main()
